import os.path

import logging
from aiogram import Bot, Dispatcher, executor, types

from db import *
from markups import *
from utils import logo_media

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

local_storage = []


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    local_storage.clear()
    if not is_user_exist(message.from_user.id):
        add_user(message.from_user.id, message.from_user.username)
        await bot.send_message(message.chat.id, '–î–æ–±—Ä–∏–π –¥–µ–Ω—å, <b>{0}</b>!\n–¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç –õ–∞—Ç–∫—Ä–æ–∫-–°–µ—Ä–≤—ñ—Å'.format(
            message.from_user.first_name), reply_markup=main_menu, parse_mode='html')
    else:
        await bot.send_message(message.chat.id, '–î–æ–±—Ä–∏–π –¥–µ–Ω—å, <b>{0}</b>!\n–†–∞–¥—ñ –±–∞—á–∏—Ç–∏ –í–∞—Å –∑–Ω–æ–≤—É!'.format(
            message.from_user.first_name), reply_markup=main_menu, parse_mode='html')


@dp.message_handler(content_types=[types.ContentType.TEXT])
async def keyboard(message: types.Message):
    if message.chat.type == 'private':
        local_storage.clear()

        if message.text == 'üìë –î–æ–∫—É–º–µ–Ω—Ç–∏':
            await bot.send_message(message.chat.id, "<b>–î–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è —É–∫–ª–∞–¥–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É</b>\n\n<b>–ü–æ –±–µ–∑–≥–æ—Ç—ñ–≤–∫–æ–≤–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ:</b>\n1) —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –í–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞  ( —Å–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –Ñ–î–†–ü–û–£, –Ü–ü–ù, —Å–≤—ñ–¥–æ—Ü—Ç–≤–æ –ü–î–í, —è–∫—â–æ —î. –Æ—Ä–∏–¥–∏—á–Ω–∏–π –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω. —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫)\n\n<b>–ü–æ –≥–æ—Ç—ñ–≤–∫–æ–≤–æ–º—É —Ä–∞—Ö—É–Ω–∫—É:</b>\n–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è —Ç–∞ —ñ–¥–µ–Ω—Ç. –∫–æ–¥, —Å–µ—Ä—ñ—è –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞.", parse_mode='html')

        elif message.text in ('üí≤ –û—Ä–µ–Ω–¥–∞', 'üõç –î–∏–≤–∏—Ç–∏—Å—è —Ç–æ–≤–∞—Ä–∏'):
            for product in get_all_products():
                await bot.send_photo(message.chat.id, product['url'], '<b>{0}</b>\n\n{1}'.format(
                    product['name'], product['description']), parse_mode='html', reply_markup=go_to_item(str(product['id'])))

        elif message.text == 'üí≤ Logo-–∫–∏–ª–∏–º–∏':
            await bot.send_media_group(message.chat.id, logo_media())
            await bot.send_message(message.chat.id, '–ë—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ <b>Logo-–∫–∏–ª–∏–º–∏</b> –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ\n\nhttps://latkrok.in.ua/uk/logo/', parse_mode='html')

        elif message.text == 'üö® –ê–∫—Ü—ñ—ó':
            await bot.send_message(message.chat.id, '<b>–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ü—ñ–π.</b>\n–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –ø–æ–¥–∞–ª—å—à–∏–º–∏ –Ω–æ–≤–∏–Ω–∞–º–∏', parse_mode='html')

        elif message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏':
            await bot.send_message(message.chat.id, 'üè¢ <b>07400, –º.–ë—Ä–æ–≤–∞—Ä–∏, –±—É–ª.–ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ 26/2</b>\n\nüìû  (050) 552-42-92\n\nüìû  (063) 316 39 93\n\nüìß roman@latkrok.ua\n\n<b>–Ñ –ø–∏—Ç–∞–Ω–Ω—è? –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è:</b>\n@Latkrok', parse_mode='html')

        elif message.text == 'üë• –ü—Ä–æ –Ω–∞—Å':
            await bot.send_message(message.chat.id, "–¢–û–í ¬´–õ–∞—Ç–∫—Ä–æ–∫-–°–µ—Ä–≤—ñ—Å¬ª –∑–∞—Å–Ω–æ–≤–∞–Ω–µ 1996 —Ä. –ú–∏ –Ω–∞ —Ä–∏–Ω–∫—É –£–∫—Ä–∞—ó–Ω–∏ –ø–æ–Ω–∞–¥ 14 —Ä–æ–∫—ñ–≤. –ó–∞ —Ü–µ–π —á–∞—Å –º–∏ —Å—Ç–∞–ª–∏ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–º–∏ —Ç–∞ –Ω–∞–¥—ñ–π–Ω–∏–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n–£ –∑–≤'—è–∑–∫—É –∑ —Ä–µ–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é –∫–æ–º–ø–∞–Ω—ñ—ó –≤ 2008 —Ä–æ—Ü—ñ –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ —ñ–º'—è –¢–û–í –õ–∞—Ç–∫—Ä–æ–∫ –Ω–∞ –¢–û–í –õ–∞—Ç–∫—Ä–æ–∫-–°–µ—Ä–≤—ñ—Å. –û—Å–Ω–æ–≤–Ω–∏–º –≤–∏–¥–æ–º –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ —î –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä–µ–± –Ω–∞—Å–µ–ª–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤ —É —Å—Ñ–µ—Ä—ñ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥ —ñ–∑ —É—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∏—Ç–ª–æ–≤–∏—Ö, –æ—Ñ—ñ—Å–Ω–∏—Ö —Ç–∞ –≤–∏—Ä–æ–±–Ω–∏—á–∏—Ö –ø—Ä–∏–º—ñ—â–µ–Ω—å —É —á–∏—Å—Ç–æ–º—É —Å—Ç–∞–Ω—ñ.\n\n–ó –ø–æ—á–∞—Ç–∫—É —Å–≤–æ—î—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ —Ä–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è –≤–∏–∫–ª—é—á–Ω–æ –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤–ª–∞—Å–Ω–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, –ø–æ—Å—Ç—ñ–π–Ω–æ –∑–±—ñ–ª—å—à—É—é—á–∏ –æ–±—Å—è–≥–∏ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥.")

        elif message.text == 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å':
            user = get_user(message.from_user.id)
            await bot.send_message(message.chat.id, '''
            <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b>\n–Ü–º'—è: <b>{0}</b>\n–í–∞—à telegram id: <b>{1}</b>\n–î–∞—Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è: <b>{2}</b>'''.format(
                user['name'], user['user_id'], user['join_date']), reply_markup=profile_menu, parse_mode='html')

        elif message.text == 'üìî –ú–æ—ó —Ç–æ–≤–∞—Ä–∏':
            cart = get_user_cart(message.from_user.id)
            if len(cart) != 0:
                await bot.send_message(message.chat.id, '<b>–í–∞—à –∫–æ—à–∏–∫</b>', parse_mode='html', reply_markup=cart_menu)
                for item in cart:
                    product = get_product(item['product_id'])
                    caption = f"<b>{product['name']}</b>\n\n<b>–ö-—Å—Ç—å –æ–±–º—ñ–Ω—ñ–≤:</b> {item['product_option']}\n\n<b>–ö–æ–ª—ñ—Ä:</b> {item['color']}\n\n<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> {item['quantity']}"
                    await bot.send_photo(message.chat.id, product['url'], caption, parse_mode='html', reply_markup=edit_cart(item['id']))
            else:
                with open(os.path.abspath('src/emptycart.png'), 'rb') as file:
                    await bot.send_photo(message.chat.id, file, '<b>–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>', parse_mode='html',
                                         reply_markup=empty_cart_menu)

        elif message.text == 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
            await bot.send_message(message.chat.id, 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=main_menu)

        elif message.text == 'üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
            cart = get_user_cart(message.from_user.id)
            if len(cart) != 0:
                for item in cart:
                    product = get_product(item['product_id'])
                    caption = f"<b>{product['name']}</b>\n\n<b>–ö-—Å—Ç—å –æ–±–º—ñ–Ω—ñ–≤:</b> {item['product_option']}\n\n<b>–ö–æ–ª—ñ—Ä:</b> {item['color']}\n\n<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> {item['quantity']}\n\n@{message.from_user.username}"
                    await bot.send_photo(GROUP_ID, product['url'], caption, parse_mode='html')

                delete_all_user_product(message.from_user.id)
                await bot.send_message(message.chat.id, "<b>–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–µ–∑–∞–±–∞—Ä–æ–º –∑ –í–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.</b>\n\n<b>–î–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è —É–∫–ª–∞–¥–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É, —è–∫—ñ –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.</b>\n\n<b>–ü–æ –±–µ–∑–≥–æ—Ç—ñ–≤–∫–æ–≤–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ:</b>\n1) —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –í–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞  ( —Å–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –Ñ–î–†–ü–û–£, –Ü–ü–ù, —Å–≤—ñ–¥–æ—Ü—Ç–≤–æ –ü–î–í, —è–∫—â–æ —î. –Æ—Ä–∏–¥–∏—á–Ω–∏–π –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω. —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫)\n\n<b>–ü–æ –≥–æ—Ç—ñ–≤–∫–æ–≤–æ–º—É —Ä–∞—Ö—É–Ω–∫—É:</b>\n–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è —Ç–∞ —ñ–¥–µ–Ω—Ç. –∫–æ–¥, —Å–µ—Ä—ñ—è –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞.", parse_mode='html')


@dp.callback_query_handler(lambda c: len(c.data) < 3)
async def chose_price(call: types.CallbackQuery):
    local_storage.append(call.data)
    product = get_product(call.data)
    price = get_price(product['price_id'])
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_photo(call.message.chat.id, product['url'],
                         '<b>{0}</b>\n\n{1}\n\n<b>–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–º—ñ–Ω—ñ–≤:</b>'.format(
                             product['name'], product['description']), parse_mode='html',
                         reply_markup=get_price_markup(price))


@dp.callback_query_handler(lambda c: c.data.split('-')[0].strip() in rent_names)
async def chose_color(call: types.CallbackQuery):
    local_storage.append(call.data)
    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                   caption='<b>–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä:</b>', parse_mode='html', reply_markup=colors)


@dp.callback_query_handler(lambda c: c.data in ('–°—Ç–∞–ª—å', '–ì—Ä–∞–Ω—ñ—Ç', '–ö–µ–¥—Ä'))
async def chose_quantity(call: types.CallbackQuery):
    local_storage.append(call.data)
    local_storage.append(1)
    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                   caption='<b>–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∏–ª–∏–º—ñ–≤:</b>', parse_mode='html', reply_markup=slider())


@dp.callback_query_handler(lambda c: c.data.split('-')[0] in ('plus', 'minus'))
async def change_quantity(call: types.CallbackQuery):
    data = call.data.split('-')
    try:
        if data[0] == 'plus' and int(data[1]) < 60:
            local_storage[-1] = int(data[1]) + 1
            await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                           caption='<b>–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∏–ª–∏–º—ñ–≤:</b>', parse_mode='html',
                                           reply_markup=slider(int(data[1]) + 1))
        elif data[0] == 'minus' and int(data[1]) > 1:
            local_storage[-1] = int(data[1]) - 1
            await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                           caption='<b>–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∏–ª–∏–º—ñ–≤:</b>', parse_mode='html',
                                           reply_markup=slider(int(data[1]) - 1))
    except IndexError:
        await bot.send_message(call.message.chat.id, '<b>–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞, –±—É–¥—å –ª–∞—Å–∫–∞ –ø–æ—á–Ω—ñ—Ç—å –∑ –ø–æ—á–∞—Ç–∫—É</b>',
                               parse_mode='html', reply_markup=main_menu)


@dp.callback_query_handler(lambda c: c.data == 'add-to-cart')
async def add_to_cart(call: types.CallbackQuery):
    add_product(call.from_user.id, *local_storage)
    local_storage.clear()
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    with open(os.path.abspath('src/success.png'), 'rb') as file:
        await bot.send_photo(call.message.chat.id, file,
                             '<b>–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–æ—à–∏–∫—É(–∫–æ—à–∏–∫ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –ø—Ä–æ—Ñ—ñ–ª—ñ)</b>',
                             parse_mode='html', reply_markup=main_menu)


@dp.callback_query_handler(lambda c: c.data.split('-')[0] == 'delete')
async def delete_item(call: types.CallbackQuery):
    delete_product(int(call.data.split('-')[1]))
    with open(os.path.abspath('src/success.png'), 'rb') as file:
        await bot.edit_message_media(types.InputMedia(media=file, caption='–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!'),
                                     call.message.chat.id, call.message.message_id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
